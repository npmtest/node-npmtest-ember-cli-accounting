{"/home/travis/build/npmtest/node-npmtest-ember-cli-accounting/test.js":"/* istanbul instrument in package npmtest_ember_cli_accounting */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-accounting/lib.npmtest_ember_cli_accounting.js":"/* istanbul instrument in package npmtest_ember_cli_accounting */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_cli_accounting = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_cli_accounting = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-accounting/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-cli-accounting && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_cli_accounting */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_cli_accounting\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_cli_accounting.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_ember_cli_accounting.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_cli_accounting.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_ember_cli_accounting.__dirname +\n                    '/lib.npmtest_ember_cli_accounting.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-accounting/node_modules/ember-cli-accounting/index.js":"/* eslint-env node */\n'use strict';\n\nmodule.exports = {\n  name: 'accounting'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-accounting/node_modules/ember-cli-accounting/addon/format-column.js":"import { currency } from \"./settings\";\nimport { defaults, checkPrecision, isObject, checkCurrencyFormat } from \"./utils\";\nimport formatNumber from \"./format-number\";\nimport unformat from \"./unformat\";\n\n/**\n * Format a list of numbers into an accounting column, padding with whitespace\n * to line up currency symbols, thousand separators and decimals places\n *\n * Second parameter can be an object containing keys that match the params\n *\n * NB: `white-space:pre` CSS rule is required on the list container to prevent\n * browsers from collapsing the whitespace in the output strings.\n *\n * ```js\n * accounting.formatColumn([123.5, 3456.49, 777888.99, 12345678, -5432], \"$ \");\n * ```\n *\n * @method formatColumn\n * @for accounting\n * @param {Array<Number>} list An array of numbers to format\n * @param {Object|String} [symbol=\"$\"] String with the currency symbol. For conveniency if can be an object containing all the options of the method.\n * @param {Integer}       [precision=2] Number of decimal digits\n * @param {String}        [thousand=','] String with the thousands separator.\n * @param {String}        [decimal=\".\"] String with the decimal separator.\n * @param {String}        [format=\"%s%v\"] String with the format to apply, where %s is the currency symbol and %v is the value.\n * @return {Array<String>} array of accouting-formatted number strings of same length\n */\nfunction formatColumn(list, symbol, precision, thousand, decimal, format) {\n  if (!list) {\n    return [];\n  }\n\n  // Build options object from second param (if object) or all params, extending defaults:\n  var opts = defaults(\n      (isObject(symbol) ? symbol : {\n        symbol : symbol,\n        precision : precision,\n        thousand : thousand,\n        decimal : decimal,\n        format : format\n      }),\n      currency\n    );\n\n  // Check format (returns object with pos, neg and zero), only need pos for now:\n  var formats = checkCurrencyFormat(opts.format);\n\n  // Whether to pad at start of string or after currency symbol:\n  var padAfterSymbol = formats.pos.indexOf(\"%s\") < formats.pos.indexOf(\"%v\");\n\n  // Store value for the length of the longest string in the column:\n  var maxLength = 0;\n\n  // Format the list according to options, store the length of the longest string:\n  var formatted = list.map(function(val) {\n    if (Array.isArray(val)) {\n      // Recursively format columns if list is a multi-dimensional array:\n      return formatColumn(val, opts);\n    } else {\n      // Clean up the value\n      val = unformat(val);\n\n      // Choose which format to use for this value (pos, neg or zero):\n      var useFormat = val > 0 ? formats.pos : val < 0 ? formats.neg : formats.zero;\n\n      // Format this value, push into formatted list and save the length:\n      var fVal = useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(Math.abs(val), checkPrecision(opts.precision), opts.thousand, opts.decimal));\n\n      if (fVal.length > maxLength) {\n        maxLength = fVal.length;\n      }\n      return fVal;\n    }\n  });\n\n  // Pad each number in the list and send back the column of numbers:\n  return formatted.map(function(val) {\n    // Only if this is a string (not a nested array, which would have already been padded):\n    if (typeof val === \"string\" && val.length < maxLength) {\n      // Depending on symbol position, pad after symbol or at index 0:\n      return padAfterSymbol ? val.replace(opts.symbol, opts.symbol+(new Array(maxLength - val.length + 1).join(\" \"))) : (new Array(maxLength - val.length + 1).join(\" \")) + val;\n    }\n    return val;\n  });\n}\n\nexport default formatColumn;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-accounting/node_modules/ember-cli-accounting/addon/format-money.js":"import unformat from \"./unformat\";\nimport formatNumber from \"./format-number\";\nimport { currency } from \"./settings\";\nimport { defaults, checkPrecision, isObject, checkCurrencyFormat } from \"./utils\";\n\n/**\n * Format a number into currency\n *\n * Usage: accounting.formatMoney(number, symbol, precision, thousandsSep, decimalSep, format)\n * defaults: (0, \"$\", 2, \",\", \".\", \"%s%v\")\n *\n * Localise by overriding the symbol, precision, thousand / decimal separators and format\n * Second param can be an object matching `settings.currency` which is the easiest way.\n *\n * ```js\n * // Default usage:\n * accounting.formatMoney(12345678); // $12,345,678.00\n *\n * // European formatting (custom symbol and separators), can also use options object as second parameter:\n * accounting.formatMoney(4999.99, \"€\", 2, \".\", \",\"); // €4.999,99\n *\n * // Negative values can be formatted nicely:\n * accounting.formatMoney(-500000, \"£ \", 0); // £ -500,000\n *\n * // Simple `format` string allows control of symbol position (%v = value, %s = symbol):\n * accounting.formatMoney(5318008, { symbol: \"GBP\",  format: \"%v %s\" }); // 5,318,008.00 GBP\n * ```\n *\n * @method formatMoney\n * @for accounting\n * @param {Number}        number Number to be formatted.\n * @param {Object|String} [symbol=\"$\"] String with the currency symbol. For conveniency if can be an object containing all the options of the method.\n * @param {Integer}       [precision=2] Number of decimal digits\n * @param {String}        [thousand=','] String with the thousands separator.\n * @param {String}        [decimal=\".\"] String with the decimal separator.\n * @param {String}        [format=\"%s%v\"] String with the format to apply, where %s is the currency symbol and %v is the value.\n * @return {String} The given number properly formatted as money.\n */\nfunction formatMoney(number, symbol, precision, thousand, decimal, format) {\n  // Resursively format arrays:\n  if (Array.isArray(number)) {\n    return number.map(function(val){\n      return formatMoney(val, symbol, precision, thousand, decimal, format);\n    });\n  }\n\n  // Clean up number:\n  number = unformat(number);\n\n  // Build options object from second param (if object) or all params, extending defaults:\n  var opts = defaults(\n      (isObject(symbol) ? symbol : {\n        symbol : symbol,\n        precision : precision,\n        thousand : thousand,\n        decimal : decimal,\n        format : format\n      }),\n      currency\n    );\n\n  // Check format (returns object with pos, neg and zero):\n  var formats = checkCurrencyFormat(opts.format);\n\n  // Choose which format to use for this value:\n  var useFormat = number > 0 ? formats.pos : number < 0 ? formats.neg : formats.zero;\n\n  // Return with currency symbol added:\n  return useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(Math.abs(number), checkPrecision(opts.precision), opts.thousand, opts.decimal));\n}\n\nexport default formatMoney;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-accounting/node_modules/ember-cli-accounting/addon/format-number.js":"import { number } from \"./settings\";\nimport { defaults, checkPrecision, isObject } from \"./utils\";\nimport unformat from \"./unformat\";\nimport toFixed from \"./to-fixed\";\n\nvar numberSettings = number;\n\n/**\n * Format a number, with comma-separated thousands and custom precision/decimal places\n * Alias: `accounting.format()`\n *\n * Localise by overriding the precision and thousand / decimal separators\n * 2nd parameter `precision` can be an object matching `settings.number`\n *\n * ```js\n * accounting.formatNumber(5318008);              // 5,318,008\n * accounting.formatNumber(9876543.21, 3, \" \"); // 9 876 543.210\n * ```\n *\n * @method formatNumber\n * @for accounting\n * @param {Number}        number The number to be formatted.\n * @param {Integer}       [precision=2] Number of decimal digits\n * @param {String}        [thousand=','] String with the thousands separator.\n * @param {String}        [decimal=\".\"] String with the decimal separator.\n * @return {String} The given number properly formatted.\n */\nfunction formatNumber(number, precision, thousand, decimal) {\n  // Resursively format arrays:\n  if (Array.isArray(number)) {\n    return number.map(function(val) {\n      return formatNumber(val, precision, thousand, decimal);\n    });\n  }\n\n  // Clean up number:\n  number = unformat(number);\n\n  // Build options object from second param (if object) or all params, extending defaults:\n  var opts = defaults(\n      (isObject(precision) ? precision : {\n        precision : precision,\n        thousand : thousand,\n        decimal : decimal\n      }),\n      numberSettings\n    );\n\n  // Clean up precision\n  var usePrecision = checkPrecision(opts.precision);\n\n  // Do some calc:\n  var negative = number < 0 ? \"-\" : \"\";\n  var base = parseInt(toFixed(Math.abs(number || 0), usePrecision), 10) + \"\";\n  var mod = base.length > 3 ? base.length % 3 : 0;\n\n  // Format the number:\n  return negative + (mod ? base.substr(0, mod) + opts.thousand : \"\") + base.substr(mod).replace(/(\\d{3})(?=\\d)/g, \"$1\" + opts.thousand) + (usePrecision ? opts.decimal + toFixed(Math.abs(number), usePrecision).split('.')[1] : \"\");\n}\n\nexport default formatNumber;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-accounting/node_modules/ember-cli-accounting/addon/format.js":"import formatNumber from \"./format-number\";\n/**\n * Alias of formatNumber\n *\n * @method format\n * @for accounting\n */\nexport default formatNumber;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-accounting/node_modules/ember-cli-accounting/addon/parse.js":"import unformat from \"./unformat\";\n/**\n * Alias of unformat\n *\n * @method parse\n * @for accounting\n */\nexport default unformat;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-accounting/node_modules/ember-cli-accounting/addon/settings.js":"var currency = {\n  symbol : \"$\",     // default currency symbol is '$'\n  format : \"%s%v\",  // controls output: %s = symbol, %v = value (can be object, see docs)\n  decimal : \".\",    // decimal point separator\n  thousand : \",\",   // thousands separator\n  precision : 2,    // decimal places\n  grouping : 3      // digit grouping (not implemented yet)\n};\nvar number = {\n  precision : 0,    // default precision on numbers is 0\n  grouping : 3,     // digit grouping (not implemented yet)\n  thousand : \",\",\n  decimal : \".\"\n};\n\nexport { currency, number };","/home/travis/build/npmtest/node-npmtest-ember-cli-accounting/node_modules/ember-cli-accounting/addon/to-fixed.js":"import { checkPrecision } from \"./utils\";\nimport { number } from \"./settings\";\nimport unformat from \"./unformat\";\n\n/**\n * Implementation of toFixed() that treats floats more like decimals\n *\n * Fixes binary rounding issues (eg. (0.615).toFixed(2) === \"0.61\") that present\n * problems for accounting- and finance-related software.\n *\n * ```js\n *  (0.615).toFixed(2);           // \"0.61\" (native toFixed has rounding issues)\n *  accounting.toFixed(0.615, 2); // \"0.62\"\n * ```\n *\n * @method toFixed\n * @for accounting\n * @param Float}   value         The float to be treated as a decimal number.\n * @param {Number} [precision=2] The number of decimal digits to keep.\n * @return {String} The given number transformed into a string with the given precission\n */\nexport default function toFixed(value, precision) {\n  precision = checkPrecision(precision, number.precision);\n  var power = Math.pow(10, precision);\n\n  // Multiply up by precision, round accurately, then divide and use native toFixed():\n  return (Math.round(unformat(value) * power) / power).toFixed(precision);\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-accounting/node_modules/ember-cli-accounting/addon/unformat.js":"import { number } from \"./settings\";\n\n/**\n * Takes a string/array of strings, removes all formatting/cruft and returns the raw float value\n * Alias: `accounting.parse(string)`\n *\n * Decimal must be included in the regular expression to match floats (defaults to\n * accounting.settings.number.decimal), so if the number uses a non-standard decimal\n * separator, provide it as the second argument.\n *\n * Also matches bracketed negatives (eg. \"$ (1.99)\" => -1.99)\n *\n * Doesn't throw any errors (`NaN`s become 0) but this may change in future\n *\n * ```js\n *  accounting.unformat(\"£ 12,345,678.90 GBP\"); // 12345678.9\n * ```\n *\n * @method unformat\n * @for accounting\n * @param {String|Array<String>} value The string or array of strings containing the number/s to parse.\n * @param {Number}               decimal Number of decimal digits of the resultant number\n * @return {Float} The parsed number\n */\nfunction unformat(value, decimal) {\n  // Recursively unformat arrays:\n  if (Array.isArray(value)) {\n    return value.map(function(val) {\n      return unformat(val, decimal);\n    });\n  }\n\n  // Fails silently (need decent errors):\n  value = value || 0;\n\n  // Return the value as-is if it's already a number:\n  if (typeof value === \"number\") {\n    return value;\n  }\n\n  // Default decimal point comes from settings, but could be set to eg. \",\" in opts:\n  decimal = decimal || number.decimal;\n\n   // Build regex to strip out everything except digits, decimal point and minus sign:\n  var regex = new RegExp(\"[^0-9-\" + decimal + \"]\", [\"g\"]);\n  var unformatted = parseFloat(\n    (\"\" + value)\n    .replace(/\\((.*)\\)/, \"-$1\") // replace bracketed values with negatives\n    .replace(regex, '')         // strip out any cruft\n    .replace(decimal, '.')      // make sure decimal point is standard\n  );\n\n  // This will fail silently which may cause trouble, let's wait and see:\n  return !isNaN(unformatted) ? unformatted : 0;\n}\n\n\nexport default unformat;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-accounting/node_modules/ember-cli-accounting/addon/utils.js":"import { currency } from \"./settings\";\nimport Ember from 'ember';\n\nvar assign = Ember.assign || Ember.merge;\n\n/**\n * Extends an object with a defaults object, similar to underscore's _.defaults\n *\n * Used for abstracting parameter handling from API methods\n */\nfunction defaults(object, defs) {\n  var key;\n  object = assign({}, object);\n  defs = defs || {};\n  // Iterate over object non-prototype properties:\n  for (key in defs) {\n    if (defs.hasOwnProperty(key)) {\n      // Replace values with defaults only if undefined (allow empty/zero values):\n      if (object[key] == null) {\n        object[key] = defs[key];\n      }\n    }\n  }\n  return object;\n}\n\n/**\n * Check and normalise the value of precision (must be positive integer)\n */\nfunction checkPrecision(val, base) {\n  val = Math.round(Math.abs(val));\n  return isNaN(val)? base : val;\n}\n\n/**\n * Returns the toString representation of an object even when the object \n * does not support `toString` out of the box, i.e. `EmptyObject`.\n */\nfunction toString(obj) {\n  return Object.prototype.toString.call(obj);\n}\n\n/**\n * Tests whether supplied parameter is a true object\n */\nfunction isObject(obj) {\n  return obj && toString(obj) === '[object Object]';\n}\n\n/**\n * Parses a format string or object and returns format obj for use in rendering\n *\n * `format` is either a string with the default (positive) format, or object\n * containing `pos` (required), `neg` and `zero` values (or a function returning\n * either a string or object)\n *\n * Either string or format.pos must contain \"%v\" (value) to be valid\n */\nfunction checkCurrencyFormat(format) {\n  var defaults = currency.format;\n\n  // Allow function as format parameter (should return string or object):\n  if ( typeof format === \"function\" ) {\n    format = format();\n  }\n\n  // Format can be a string, in which case `value` (\"%v\") must be present:\n  if ( typeof format === \"string\" && format.match(\"%v\") ) {\n\n    // Create and return positive, negative and zero formats:\n    return {\n      pos : format,\n      neg : format.replace(\"-\", \"\").replace(\"%v\", \"-%v\"),\n      zero : format\n    };\n\n  // If no format, or object is missing valid positive value, use defaults:\n  } else if ( !format || !format.pos || !format.pos.match(\"%v\") ) {\n\n    // If defaults is a string, casts it to an object for faster checking next time:\n    if (typeof defaults !== \"string\") {\n      return defaults;\n    } else {\n      return currency.format = {\n        pos : defaults,\n        neg : defaults.replace(\"%v\", \"-%v\"),\n        zero : defaults\n      };\n    }\n  }\n  // Otherwise, assume format was fine:\n  return format;\n}\n\nexport {\n  defaults,\n  checkPrecision,\n  isObject,\n  checkCurrencyFormat\n};\n\nexport default {\n  defaults: defaults,\n  checkPrecision: checkPrecision,\n  isObject: isObject,\n  checkCurrencyFormat: checkCurrencyFormat,\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-accounting/node_modules/ember-cli-accounting/addon/version.js":"export default '0.4.1';","/home/travis/build/npmtest/node-npmtest-ember-cli-accounting/node_modules/ember-cli-accounting/config/environment.js":"/* eslint-env node */\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n"}